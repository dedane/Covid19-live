{"remainingRequest":"/home/makashima/Documents/code/covid/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/makashima/Documents/code/covid/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/home/makashima/Documents/code/covid/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/makashima/Documents/code/covid/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/makashima/Documents/code/covid/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/home/makashima/Documents/code/covid/src/views/Home.vue","mtime":1590005338766},{"path":"/home/makashima/Documents/code/covid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/makashima/Documents/code/covid/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/makashima/Documents/code/covid/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/makashima/Documents/code/covid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/makashima/Documents/code/covid/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}